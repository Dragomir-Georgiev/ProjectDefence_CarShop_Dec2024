// <auto-generated />
using System;
using CarShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarShop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207154339_SeedApplicationUserRental")]
    partial class SeedApplicationUserRental
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarShop.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c2d88cd-675a-4904-a431-23a043e8313e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70bc9e3a-4022-46cd-a3ec-af6d282bdfd8",
                            Email = "testuser123@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER123@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECRpobjRzY0WNeTRjj4r5RcZBnGva3/8SBKzm3aV7S/CJ+bW3Gjmir/dFktfQwo8og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcdc10ec-0bbf-404f-8d3b-478a416615dd",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = new Guid("7d98badc-6c8c-4588-a4f5-d4a43ca9d741"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78b54a7f-65c0-4e2f-90e5-df7f39ecda8e",
                            Email = "dragomir@yahoo.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRAGOMIR@YAHOO.CA",
                            NormalizedUserName = "DRAGOMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAENUcTvc1MRBFShlai9U2TsQZPytxMxtPxkU7zeudyDLboVL8+2wSkqeS4xhmbiLfow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7b05dd4-0299-489a-b4ed-cd36be1fa02e",
                            TwoFactorEnabled = false,
                            UserName = "Dragomir"
                        },
                        new
                        {
                            Id = new Guid("49317ff2-5aac-426d-a8bd-d4bee288c776"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2e223c7-8b64-496f-8a09-82833afaa340",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "АDMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEErQqhERgt2Kuwfh8/AUd4EPFy/4yBKYPuaEH5Es39TD51wlQikOszCKxPMKJsSJ8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "089176ca-4081-4d3c-9ee7-eafc263ee3bb",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("CarShop.Data.Models.ApplicationUserRental", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User unique identifier");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Rental unique identifier");

                    b.HasKey("ApplicationUserId", "RentalId");

                    b.HasIndex("RentalId");

                    b.ToTable("ApplicationsUsersRentals");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = new Guid("4c2d88cd-675a-4904-a431-23a043e8313e"),
                            RentalId = new Guid("dcf823b4-33f9-4102-a63d-ae28ee7e7708")
                        },
                        new
                        {
                            ApplicationUserId = new Guid("4c2d88cd-675a-4904-a431-23a043e8313e"),
                            RentalId = new Guid("d58bf2b1-b3b1-4f63-9603-05ba7ad3e6f7")
                        },
                        new
                        {
                            ApplicationUserId = new Guid("4c2d88cd-675a-4904-a431-23a043e8313e"),
                            RentalId = new Guid("d599bce1-6c7a-401a-9a5b-d10e0736e3d8")
                        });
                });

            modelBuilder.Entity("CarShop.Data.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car unique identifier");

                    b.Property<Guid>("CarCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the category of the car");

                    b.Property<string>("CarImage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Picture of the car");

                    b.Property<int>("DoorsCount")
                        .HasColumnType("int")
                        .HasComment("Total amount of doors of the car");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float")
                        .HasComment("The fuel consumption of the car");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Availability of the car");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Has the car been removed or not removed from the list of available rental cars");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("The brand of the company that made the car");

                    b.Property<int>("MaximumSpeed")
                        .HasColumnType("int")
                        .HasComment("Car maximum speed");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("The name of the car");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price for the car per day");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int")
                        .HasComment("Manufacturing year of the car");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int")
                        .HasComment("The maximum seating capacity of the car");

                    b.Property<double>("TankVolume")
                        .HasColumnType("float")
                        .HasComment("The tank volume of the car");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int")
                        .HasComment("Transmission type of the car");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4590f15d-634b-4a10-9f69-32a88931922f"),
                            CarCategoryId = new Guid("264e1f65-36e4-44fb-9605-64bec9b9ed7a"),
                            CarImage = "https://r44performance.com/cdn/shop/articles/R44Performance-Porsche-911-GT3RS.jpg?v=1710775245&width=1500",
                            DoorsCount = 2,
                            FuelConsumption = 13.800000000000001,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "Porsche",
                            MaximumSpeed = 311,
                            Model = "911",
                            PricePerDay = 1135.46m,
                            ProductionYear = 2024,
                            SeatingCapacity = 2,
                            TankVolume = 64.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("e3ea8915-979c-478f-b597-4b50e5f31cfd"),
                            CarCategoryId = new Guid("9c8e3ead-80a2-45c6-afba-91248baebef3"),
                            CarImage = "https://images.pistonheads.com/nimg/48142/blobid0.jpg",
                            DoorsCount = 2,
                            FuelConsumption = 12.199999999999999,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "McLaren",
                            MaximumSpeed = 332,
                            Model = "750S Spider",
                            PricePerDay = 1797.90m,
                            ProductionYear = 2023,
                            SeatingCapacity = 2,
                            TankVolume = 72.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("eea3a59b-1d08-47d5-82f5-863384b9df71"),
                            CarCategoryId = new Guid("a69fe7ac-6ad4-403f-ba76-eefbc3a691c6"),
                            CarImage = "https://www.ramtrucks.com/content/dam/fca-brands/na/ramtrucks/en_us/2025/ram-1500/gallery/desktop/my25-ram-1500-gallery-open-1-d.jpg",
                            DoorsCount = 4,
                            FuelConsumption = 15.699999999999999,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "RAM",
                            MaximumSpeed = 190,
                            Model = "1500",
                            PricePerDay = 317.28m,
                            ProductionYear = 2024,
                            SeatingCapacity = 6,
                            TankVolume = 125.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("3f821603-c82c-4b46-bc94-8a246e5ca4c1"),
                            CarCategoryId = new Guid("efdd48c4-fa58-48d9-8b86-0b9c3f0d64a6"),
                            CarImage = "https://www.auto-data.net/images/f46/Dodge-Caravan-V-facelift-2011.jpg",
                            DoorsCount = 5,
                            FuelConsumption = 13.800000000000001,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "Dodge",
                            MaximumSpeed = 220,
                            Model = "Caravan",
                            PricePerDay = 31.78m,
                            ProductionYear = 2011,
                            SeatingCapacity = 7,
                            TankVolume = 76.0,
                            TransmissionType = 1
                        },
                        new
                        {
                            Id = new Guid("29480900-2b63-4503-8818-647fde2a47e5"),
                            CarCategoryId = new Guid("df2cdc1f-46c7-428b-a54b-e03eb0e33a7f"),
                            CarImage = "https://www.motortrend.com/uploads/2022/03/2022-Mazda-Mazda3-Sedan-AWD-Turbo-29.jpg",
                            DoorsCount = 4,
                            FuelConsumption = 8.4000000000000004,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "Mazda",
                            MaximumSpeed = 204,
                            Model = "3",
                            PricePerDay = 30m,
                            ProductionYear = 2022,
                            SeatingCapacity = 5,
                            TankVolume = 50.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("8326b7a1-6a93-46c4-89eb-d1a50330e3b6"),
                            CarCategoryId = new Guid("91ac82e0-9aa7-4d53-bba4-cd8128c0b629"),
                            CarImage = "https://www.thedrive.com/wp-content/uploads/2022/06/21/DSC00241.jpg?quality=85",
                            DoorsCount = 5,
                            FuelConsumption = 8.6999999999999993,
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Mazda",
                            MaximumSpeed = 204,
                            Model = "3",
                            PricePerDay = 35m,
                            ProductionYear = 2022,
                            SeatingCapacity = 5,
                            TankVolume = 50.0,
                            TransmissionType = 1
                        },
                        new
                        {
                            Id = new Guid("e5a47d2a-68fe-4156-8f70-21072e04eb77"),
                            CarCategoryId = new Guid("5e5b45b5-6bce-4e8c-a05a-eb6d5540f9ce"),
                            CarImage = "https://manuals.plus/wp-content/uploads/2022/03/HONDA-2022-CR-V-FEATURD3.jpg",
                            DoorsCount = 5,
                            FuelConsumption = 5.9000000000000004,
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Honda",
                            MaximumSpeed = 190,
                            Model = "CR-V",
                            PricePerDay = 37m,
                            ProductionYear = 2022,
                            SeatingCapacity = 5,
                            TankVolume = 53.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("cbc0f0df-2fbf-4d87-ab77-c214efa3e363"),
                            CarCategoryId = new Guid("8e86c12d-4d99-4c26-be13-befca7323ab3"),
                            CarImage = "https://www.auto-data.net/images/f24/file8561751.jpg",
                            DoorsCount = 2,
                            FuelConsumption = 7.0,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "Audi",
                            MaximumSpeed = 250,
                            Model = "A5",
                            PricePerDay = 430.39m,
                            ProductionYear = 2019,
                            SeatingCapacity = 4,
                            TankVolume = 58.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("0f3815d0-37b0-440d-978f-22fe3d9416cc"),
                            CarCategoryId = new Guid("47b3ba7c-8aaa-450d-bf9f-847106fc8e02"),
                            CarImage = "https://www.passportbmw.com/blogs/846/wp-content/uploads/2022/09/P90479453__mid.jpeg",
                            DoorsCount = 2,
                            FuelConsumption = 7.9000000000000004,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "BMW",
                            MaximumSpeed = 250,
                            Model = "Z4",
                            PricePerDay = 72m,
                            ProductionYear = 2024,
                            SeatingCapacity = 2,
                            TankVolume = 52.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("41f5527c-c52b-409c-a6e8-74e8f6497c80"),
                            CarCategoryId = new Guid("df2cdc1f-46c7-428b-a54b-e03eb0e33a7f"),
                            CarImage = "",
                            DoorsCount = 4,
                            FuelConsumption = 5.8099999999999996,
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Toyota",
                            MaximumSpeed = 205,
                            Model = "Camry",
                            PricePerDay = 54m,
                            ProductionYear = 2023,
                            SeatingCapacity = 5,
                            TankVolume = 60.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("04f4c07e-045d-457e-af60-b0397cf81225"),
                            CarCategoryId = new Guid("91ac82e0-9aa7-4d53-bba4-cd8128c0b629"),
                            CarImage = "",
                            DoorsCount = 5,
                            FuelConsumption = 8.4000000000000004,
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Honda",
                            MaximumSpeed = 270,
                            Model = "Civic Type R",
                            PricePerDay = 0m,
                            ProductionYear = 2020,
                            SeatingCapacity = 4,
                            TankVolume = 46.0,
                            TransmissionType = 1
                        },
                        new
                        {
                            Id = new Guid("77b5fe3d-be73-4089-8512-b6665370a2ec"),
                            CarCategoryId = new Guid("264e1f65-36e4-44fb-9605-64bec9b9ed7a"),
                            CarImage = "https://s3-ap-southeast-1.amazonaws.com/subaru.asia-cms/articles/logo_1b697b9c5550ddceb41469d84a27d60a.jpg",
                            DoorsCount = 2,
                            FuelConsumption = 9.5,
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Subaru",
                            MaximumSpeed = 226,
                            Model = "BRZ",
                            PricePerDay = 45m,
                            ProductionYear = 2021,
                            SeatingCapacity = 4,
                            TankVolume = 50.0,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("ba7f77e9-e054-4ec9-8f11-2d7346ea80b5"),
                            CarCategoryId = new Guid("a69fe7ac-6ad4-403f-ba76-eefbc3a691c6"),
                            CarImage = "https://dealerinspire-image-library-prod.s3.us-east-1.amazonaws.com/images/G91FpK6If8GqdDPnNyDDqhHR8SEG2pb5lVb3ghli.jpeg",
                            DoorsCount = 4,
                            FuelConsumption = 14.699999999999999,
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Chevrolet",
                            MaximumSpeed = 183,
                            Model = "Silverado 1500",
                            PricePerDay = 140m,
                            ProductionYear = 2022,
                            SeatingCapacity = 5,
                            TankVolume = 90.799999999999997,
                            TransmissionType = 0
                        },
                        new
                        {
                            Id = new Guid("99fed59f-dce8-4359-8ccb-88efa7781faa"),
                            CarCategoryId = new Guid("df2cdc1f-46c7-428b-a54b-e03eb0e33a7f"),
                            CarImage = "https://parkers-images.bauersecure.com/wp-images/174840/bmw_3_series_050.jpg",
                            DoorsCount = 4,
                            FuelConsumption = 7.7999999999999998,
                            IsAvailable = false,
                            IsDeleted = false,
                            Make = "BMW",
                            MaximumSpeed = 250,
                            Model = "3 Series",
                            PricePerDay = 75m,
                            ProductionYear = 2022,
                            SeatingCapacity = 5,
                            TankVolume = 59.0,
                            TransmissionType = 0
                        });
                });

            modelBuilder.Entity("CarShop.Data.Models.CarCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car category unique identifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The name of the category");

                    b.HasKey("Id");

                    b.ToTable("CarCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e5b45b5-6bce-4e8c-a05a-eb6d5540f9ce"),
                            CategoryName = "SUV"
                        },
                        new
                        {
                            Id = new Guid("8e86c12d-4d99-4c26-be13-befca7323ab3"),
                            CategoryName = "Convertible"
                        },
                        new
                        {
                            Id = new Guid("91ac82e0-9aa7-4d53-bba4-cd8128c0b629"),
                            CategoryName = "Hatchback"
                        },
                        new
                        {
                            Id = new Guid("df2cdc1f-46c7-428b-a54b-e03eb0e33a7f"),
                            CategoryName = "Sedan"
                        },
                        new
                        {
                            Id = new Guid("9c8e3ead-80a2-45c6-afba-91248baebef3"),
                            CategoryName = "Sports car"
                        },
                        new
                        {
                            Id = new Guid("264e1f65-36e4-44fb-9605-64bec9b9ed7a"),
                            CategoryName = "Coupe"
                        },
                        new
                        {
                            Id = new Guid("a69fe7ac-6ad4-403f-ba76-eefbc3a691c6"),
                            CategoryName = "Pickup truck"
                        },
                        new
                        {
                            Id = new Guid("47b3ba7c-8aaa-450d-bf9f-847106fc8e02"),
                            CategoryName = "Roadster"
                        },
                        new
                        {
                            Id = new Guid("efdd48c4-fa58-48d9-8b86-0b9c3f0d64a6"),
                            CategoryName = "Minivan"
                        });
                });

            modelBuilder.Entity("CarShop.Data.Models.CarDiscount", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Car unique identifier");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Discount unique identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Has the discount been deleted or not");

                    b.HasKey("CarId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("CarDiscounts");
                });

            modelBuilder.Entity("CarShop.Data.Models.DamageReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Damage report unique identifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostEstimation")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Estimation of the cost of the repairs");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the damage to the car");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the reported incident");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("DamageReports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdca012a-0a63-4b99-bb3e-45aef2b5d1a3"),
                            CarId = new Guid("99fed59f-dce8-4359-8ccb-88efa7781faa"),
                            CostEstimation = 1200.50m,
                            Description = "Front bumper is severely dented due to a collision with a pole.",
                            ReportedDate = new DateTime(2024, 12, 4, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(8267)
                        },
                        new
                        {
                            Id = new Guid("a03fad62-483f-4f88-b7e9-1c857c5650de"),
                            CarId = new Guid("3f821603-c82c-4b46-bc94-8a246e5ca4c1"),
                            CostEstimation = 600.00m,
                            Description = "Rear window shattered after an attempted break-in at the parking lot.",
                            ReportedDate = new DateTime(2024, 11, 27, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(8289)
                        },
                        new
                        {
                            Id = new Guid("6e92a04a-c225-4d2a-a0fe-c85ffa59e726"),
                            CarId = new Guid("29480900-2b63-4503-8818-647fde2a47e5"),
                            CostEstimation = 750.25m,
                            Description = "Left side mirror broken and scratches along the driver-side door.",
                            ReportedDate = new DateTime(2024, 12, 2, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(8293)
                        },
                        new
                        {
                            Id = new Guid("a8faafb7-9cd4-49fc-8edc-d1d76c37db8a"),
                            CarId = new Guid("eea3a59b-1d08-47d5-82f5-863384b9df71"),
                            CostEstimation = 1400.00m,
                            Description = "Hood is dented and paint is chipped from debris falling on the car.",
                            ReportedDate = new DateTime(2024, 11, 22, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(8296)
                        },
                        new
                        {
                            Id = new Guid("9f6c5e4c-9f4f-48d1-8adb-bc842bfca9b7"),
                            CarId = new Guid("e3ea8915-979c-478f-b597-4b50e5f31cfd"),
                            CostEstimation = 1800.75m,
                            Description = "Tires were slashed and the windshield has a large crack running across.",
                            ReportedDate = new DateTime(2024, 11, 30, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(8300)
                        });
                });

            modelBuilder.Entity("CarShop.Data.Models.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Discount unique identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Description of the discount");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float")
                        .HasComment("Percentage of the discount for the daily price of the car");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("CarShop.Data.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Feedback unique identifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Feedback comment from user for the car");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CarId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fdb67f3-35d5-426e-9b16-4c73fa839f6d"),
                            ApplicationUserId = new Guid("7d98badc-6c8c-4588-a4f5-d4a43ca9d741"),
                            CarId = new Guid("29480900-2b63-4503-8818-647fde2a47e5"),
                            Comment = "Great car, smooth ride!",
                            FeedbackDate = new DateTime(2024, 11, 29, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(9420),
                            Rating = 5
                        },
                        new
                        {
                            Id = new Guid("bcb6417a-3a68-4ffb-966f-20a2c3a59111"),
                            ApplicationUserId = new Guid("4c2d88cd-675a-4904-a431-23a043e8313e"),
                            CarId = new Guid("29480900-2b63-4503-8818-647fde2a47e5"),
                            Comment = "The car was decent but had a few issues.",
                            FeedbackDate = new DateTime(2024, 12, 1, 15, 43, 39, 96, DateTimeKind.Utc).AddTicks(9434),
                            Rating = 2
                        });
                });

            modelBuilder.Entity("CarShop.Data.Models.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Rental unique identifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcf823b4-33f9-4102-a63d-ae28ee7e7708"),
                            CarId = new Guid("4590f15d-634b-4a10-9f69-32a88931922f"),
                            EndDate = new DateTime(2024, 11, 30, 15, 43, 39, 97, DateTimeKind.Utc).AddTicks(601),
                            StartDate = new DateTime(2024, 11, 27, 15, 43, 39, 97, DateTimeKind.Utc).AddTicks(598),
                            TotalCost = 300.00m
                        },
                        new
                        {
                            Id = new Guid("d58bf2b1-b3b1-4f63-9603-05ba7ad3e6f7"),
                            CarId = new Guid("cbc0f0df-2fbf-4d87-ab77-c214efa3e363"),
                            EndDate = new DateTime(2024, 12, 5, 15, 43, 39, 97, DateTimeKind.Utc).AddTicks(613),
                            StartDate = new DateTime(2024, 12, 2, 15, 43, 39, 97, DateTimeKind.Utc).AddTicks(612),
                            TotalCost = 450.00m
                        },
                        new
                        {
                            Id = new Guid("d599bce1-6c7a-401a-9a5b-d10e0736e3d8"),
                            CarId = new Guid("0f3815d0-37b0-440d-978f-22fe3d9416cc"),
                            EndDate = new DateTime(2024, 12, 6, 15, 43, 39, 97, DateTimeKind.Utc).AddTicks(617),
                            StartDate = new DateTime(2024, 12, 4, 15, 43, 39, 97, DateTimeKind.Utc).AddTicks(616),
                            TotalCost = 200.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarShop.Data.Models.ApplicationUserRental", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRentals")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarShop.Data.Models.Rental", "Rental")
                        .WithMany("ApplicationUserRentals")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("CarShop.Data.Models.Car", b =>
                {
                    b.HasOne("CarShop.Data.Models.CarCategory", "CarCategory")
                        .WithMany("Cars")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarCategory");
                });

            modelBuilder.Entity("CarShop.Data.Models.CarDiscount", b =>
                {
                    b.HasOne("CarShop.Data.Models.Car", "Car")
                        .WithMany("CarDiscounts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarShop.Data.Models.Discount", "Discount")
                        .WithMany("CarDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("CarShop.Data.Models.DamageReport", b =>
                {
                    b.HasOne("CarShop.Data.Models.Car", "Car")
                        .WithMany("DamageReports")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarShop.Data.Models.Feedback", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShop.Data.Models.Car", "Car")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarShop.Data.Models.Rental", b =>
                {
                    b.HasOne("CarShop.Data.Models.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarShop.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRentals");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("CarShop.Data.Models.Car", b =>
                {
                    b.Navigation("CarDiscounts");

                    b.Navigation("DamageReports");

                    b.Navigation("Feedbacks");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("CarShop.Data.Models.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarShop.Data.Models.Discount", b =>
                {
                    b.Navigation("CarDiscounts");
                });

            modelBuilder.Entity("CarShop.Data.Models.Rental", b =>
                {
                    b.Navigation("ApplicationUserRentals");
                });
#pragma warning restore 612, 618
        }
    }
}
